package org.example;

import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class GameFunctions {
    private final MessageSender messageSender;
    private boolean isHidden = false;
    private String answer = "";
    private boolean isPlay;

    public GameFunctions(MessageSender messageSender) {
        this.messageSender = messageSender;
    }

    public void startGame(List<User> users) {
        if (users.size() >= 2) {
            messageSender.sendText(users.get(0).getChatID(), "–ò–≥—Ä–∞ –Ω–∞ –£–¥–∞—á—É –Ω–∞—á–∞–ª–∞—Å—å! \n" + users.get(0).getName() + " VS " + users.get(1).getName());
            messageSender.sendText(users.get(1).getChatID(), "–ò–≥—Ä–∞ –Ω–∞ –£–¥–∞—á—É –Ω–∞—á–∞–ª–∞—Å—å! \n" + users.get(0).getName() + " VS " + users.get(1).getName());
            messageSender.sendText(users.get(0).getChatID(), "\uD83D\uDC9A–ü—Ä—è—á—å —Å–≤–æ–π –∞–ª–º–∞–∑ —É–¥–∞—á–∏\uD83D\uDC9A");
            messageSender.sendText(users.get(1).getChatID(), "\uD83D\uDE42\u200D‚Üï\uFE0F –ñ–¥–∏ \uD83D\uDE42\u200D‚Üï\uFE0F");
            sendHideButtons(users.get(0).getChatID());
            isPlay = false;
        }
    }

    public void currentGame(Update update, List<User> users) {
        String receivedData = update.getCallbackQuery().getData();

        if (!isHidden) {
            answer = receivedData;
            messageSender.sendText(users.get(0).getChatID(), "\uD83E\uDE75 –ñ–¥–∏, –ø–æ–∫–∞ –∞–ø–ø–æ–Ω–µ–Ω—Ç –≤—ã–±–µ—Ä–µ—Ç –≤ –∫–∞–∫–æ–π —è—â–∏–∫ —Ç—ã —Å–ø—Ä—è—Ç–∞–ª \uD83E\uDE75");
            messageSender.sendText(users.get(1).getChatID(), "\uD83E\uDE75 –ò—â–∏ –ê–ª–º–∞–∑! \uD83E\uDE75");
            sendSearchButtons(users.get(1).getChatID());
            isHidden = true;
        } else {
            if (answer.equals(receivedData)) {
                messageSender.sendText(users.get(1).getChatID(), "–£–≥–∞–¥–∞–ª! \n–¢—ã –Ω–∞—à–µ–ª –∞–ª–º–∞–∑! ‚ù§\uFE0F\u200D\uD83D\uDD25");
                messageSender.sendText(users.get(0).getChatID(), "<----> <----> <--->");
                messageSender.sendText(users.get(0).getChatID(), "–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª! ‚òπ\uFE0F");
            } else {
                messageSender.sendText(users.get(1).getChatID(), "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –∞–ª–º–∞–∑ –±—ã–ª —Å–ø—Ä—è—Ç–∞–Ω –≤ " + answer + "!");
                messageSender.sendText(users.get(1).getChatID(), "–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª! ‚òπ\uFE0F");
                messageSender.sendText(users.get(0).getChatID(), "<----> <----> <--->");
                messageSender.sendText(users.get(0).getChatID(), "\uD83D\uDCA5 –¢—ã –ø–æ–±–µ–¥–∏–ª! \uD83D\uDCA5");
            }
            offerNewGame(users);
        }
    }

    private void sendHideButtons(long chatID) {
        InlineKeyboardButton button1 = InlineKeyboardButton.builder()
                .text("–Ø—â–∏–∫ 1").callbackData("–Ø—â–∏–∫ 1")
                .build();

        InlineKeyboardButton button2 = InlineKeyboardButton.builder()
                .text("–Ø—â–∏–∫ 2").callbackData("–Ø—â–∏–∫ 2")
                .build();

        InlineKeyboardButton button3 = InlineKeyboardButton.builder()
                .text("–Ø—â–∏–∫ 3").callbackData("–Ø—â–∏–∫ 3")
                .build();

        List<InlineKeyboardButton> row = new ArrayList<>();
        row.add(button1);
        row.add(button2);
        row.add(button3);

        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        keyboardMarkup.setKeyboard(Collections.singletonList(row));
        messageSender.sendMenu(chatID, "‚ùì\uFE0F –í—ã–±–µ—Ä–∏—Ç–µ, –∫—É–¥–∞ —Å–ø—Ä—è—Ç–∞—Ç—å –∞–ª–º–∞–∑: ", keyboardMarkup);
    }

    private void sendSearchButtons(long chatID) {
        InlineKeyboardButton button1 = InlineKeyboardButton.builder()
                .text("–Ø—â–∏–∫ 1").callbackData("–Ø—â–∏–∫ 1")
                .build();

        InlineKeyboardButton button2 = InlineKeyboardButton.builder()
                .text("–Ø—â–∏–∫ 2").callbackData("–Ø—â–∏–∫ 2")
                .build();

        InlineKeyboardButton button3 = InlineKeyboardButton.builder()
                .text("–Ø—â–∏–∫ 3").callbackData("–Ø—â–∏–∫ 3")
                .build();

        List<InlineKeyboardButton> row = new ArrayList<>();
        row.add(button1);
        row.add(button2);
        row.add(button3);

        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        keyboardMarkup.setKeyboard(Collections.singletonList(row));
        messageSender.sendMenu(chatID, "–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–π—Ç–∏ –∞–ª–º–∞–∑:", keyboardMarkup);
    }

    public void resetGame(List<User> users) {
        isHidden = false;
        answer = "";
        isPlay = true;
    }

    public void offerNewGame(List<User> users) {
        messageSender.sendText(users.get(0).getChatID(), "üéâ –ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞! üéâ\n\n–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑? –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É.");
        messageSender.sendText(users.get(1).getChatID(), "üéâ –ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞! üéâ\n\n–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑? –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É.");
        sendNewGameButton(users.get(0).getChatID());
        sendNewGameButton(users.get(1).getChatID());
    }

    private void sendNewGameButton(long chatID) {
        InlineKeyboardButton button = InlineKeyboardButton.builder()
                .text("–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É").callbackData("Start New Game")
                .build();

        List<InlineKeyboardButton> row = new ArrayList<>();
        row.add(button);

        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        keyboardMarkup.setKeyboard(Collections.singletonList(row));
        messageSender.sendMenu(chatID, "üéÆ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É!", keyboardMarkup);
    }

    public void handleNewGameRequest(Update update, List<User> users) {
        if (update.getCallbackQuery().getData().equals("Start New Game")) {
            resetGame(users);
            startGame(users);
        }
    }

    public boolean isPlay() {
        return isPlay;
    }

    public void setPlay(boolean play) {
        isPlay = play;
    }
}
